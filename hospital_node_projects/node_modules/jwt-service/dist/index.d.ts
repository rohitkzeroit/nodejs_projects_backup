import type { LogService, TimeService } from 'common-services';
export declare const DEFAULT_JWT_SECRET_ENV_NAME = "JWT_SECRET";
export interface JWT_CONFIG<T extends string extends T ? never : string = typeof DEFAULT_JWT_SECRET_ENV_NAME> {
    secretEnvName?: T;
    duration: string;
    tolerance?: string;
    algorithms: Array<string>;
}
export declare type JWT_ENV<T extends string extends T ? never : string = typeof DEFAULT_JWT_SECRET_ENV_NAME> = Record<T, string>;
/**
@typedef JWTSignResult
*/
export declare type JWTSignResult = {
    token: string;
    issuedAt: number;
    expiresAt: number;
    validAt: number;
};
export interface JWTService<PAYLOAD extends Record<string, unknown>> {
    sign: (payload: PAYLOAD, algorithm?: string) => Promise<JWTSignResult>;
    verify: (token: string) => Promise<PAYLOAD>;
}
export declare type JWTServiceConfig<T extends string extends T ? never : string = typeof DEFAULT_JWT_SECRET_ENV_NAME> = {
    JWT_SECRET_ENV_NAME?: T;
    JWT: JWT_CONFIG<T>;
};
export declare type JWTServiceDependencies<T extends string extends T ? never : string = typeof DEFAULT_JWT_SECRET_ENV_NAME> = JWTServiceConfig<T> & {
    ENV?: JWT_ENV<T>;
    time?: TimeService;
    log?: LogService;
};
export interface JWTServiceInitializer<PAYLOAD extends Record<string, unknown>, T extends string extends T ? never : string = typeof DEFAULT_JWT_SECRET_ENV_NAME> {
    (dependencies: JWTServiceDependencies<T>): Promise<JWTService<PAYLOAD>>;
}
declare const _default: typeof initJWT;
export default _default;
/**
 * Instantiate the JWT service
 * @function
 * @param  {Object}     services
 * The services to inject
 * @param  {Function}   [services.JWT_SECRET_ENV_NAME]
 * The environment variable name in which to pick-up the
 *  JWT secret
 * @param  {Object}   [services.ENV]
 * An environment object
 * @param  {Function}   services.JWT
 * The JWT service configuration object
 * @param  {Function}   [services.log]
 * A logging function
 * @param  {Function}   [services.time]
 * A function returning the current timestamp
 * @return {Promise<JWTService>}
 * A promise of the jwt service
 * @example
 * import initJWTService from 'jwt-service';
 *
 * const jwt = await initJWTService({
 *   JWT: {
 *     secret: 'secret',
 *     duration: '2d',
 *     tolerance: '2h',
 *     algorithms: ['HS256'],
 *   },
 *   log: console.log.bind(console),
 *   time: Date.now.bind(Date),
 * });
 *
 * const token = await jwt.sign({ my: 'payload' });
 */
declare function initJWT<PAYLOAD extends Record<string, unknown>, T extends string extends T ? never : string = typeof DEFAULT_JWT_SECRET_ENV_NAME>({ JWT_SECRET_ENV_NAME, ENV, JWT, time, log, }: JWTServiceDependencies<T>): Promise<JWTService<PAYLOAD>>;
