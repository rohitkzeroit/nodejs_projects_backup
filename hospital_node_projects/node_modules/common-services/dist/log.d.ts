import type { JsonValue } from 'type-fest';
export declare type LogConfig = {
    stringify: boolean;
};
export interface LogFunction {
    (...args: JsonValue[]): void;
}
export interface Logger {
    error: (message: string) => void;
    output: (message: string) => void;
    debug: (...args: JsonValue[]) => void;
}
export declare enum LogOutputTypes {
    OUTPUT = "output",
    ERROR = "error",
    DEBUG = "debug"
}
export declare type LogTypes = 'debug' | 'error' | 'info' | 'warning' | 'error-stack' | 'debug-stack';
export interface LogService {
    (type: LogTypes, ...args: JsonValue[]): void;
}
export declare const DEFAULT_LOG_CONFIG: LogConfig;
export declare const DEFAULT_LOG_ROUTING: Record<LogTypes, LogOutputTypes>;
export declare type LogServiceConfig = {
    LOG_CONFIG?: LogConfig;
    LOG_ROUTING?: {
        [type: string]: LogOutputTypes;
    };
};
export declare type LogServiceDependencies = LogServiceConfig & {
    logger: Logger;
};
declare const _default: import("knifecycle").ServiceInitializer<LogServiceDependencies, (type: LogTypes, ...args: JsonValue[]) => void>;
export default _default;
